/**
 * build.gradle for erm-dataservice-server subproject
 * Created by jeremybrown on 26/10/2016
 **/

buildscript {
    ext {
        springBootVersion = '1.4.1.RELEASE'

        applicationName = 'erm-dataservice-server'
        dbName = 'erm-dataservice-db'
        applicationDescription = 'ERM Dataservice Server'
        basePackageName = property('groupId') + ".${applicationName}.server"
    }
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
//        classpath 'se.transmode.gradle:gradle-docker:1.2'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.3'
    }
}

apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-remote-api'
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
//apply plugin: 'docker'

group = "soen387fall2016"

jar {
    baseName = "${applicationName}"
    version = "${applicationVersion}"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

publishing {
    publications {
        DataserviceServerPublication(MavenPublication) {
            from components.java
            groupId project.property('groupId')
            artifactId "${applicationName}"
            version "${applicationVersion}"
        }
    }
}

bintray {
    publications = ['DataserviceServerPublication']
    pkg {
        repo = 'erm-maven'
        name = "${applicationName}"
        userOrg = 'soen387-fall2016'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/soen387-fall2016/erm-dataservice'

        version {
            name = "${applicationVersion}"
            desc = "${applicationDescription}"
            released  = new Date()
        }
    }
}

bintrayUpload {
    dependsOn 'bootRepackage'
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from "frolvlad/alpine-oraclejdk8:slim"
    maintainer 'Benjamin Muschko "benjamin.muschko@gmail.com"'
    volume '/tmp'
    addFile "build/libs/${applicationName}-" + "${applicationVersion}.jar", "${applicationName}.jar"
    exposePort 8080
    runCommand 'sh -c "touch /' + "${applicationName}" + '.jar"'
    entryPoint "java -Djava.security.egd=file:/dev/./urandom -jar /${applicationName}.jar"
}

//docker {
//    baseImage "frolvlad/alpine-oraclejdk8:slim"
//    maintainer 'Jeremy Brown'
//}
//
//task buildDocker {
//    dependsOn 'buildDockerImageTagLatest'
//    dependsOn 'buildDockerImageTagVersion'
//}
//
//task buildDockerImageTagLatest(type: Docker) {
//    dependsOn 'bootRepackage'
//    applicationName = "${applicationName}"
//    tagVersion = 'latest'
//    volume '/tmp'
//    addFile "build/libs/${applicationName}-" + "${applicationVersion}.jar", "${applicationName}.jar"
//    exposePort 8080
//    runCommand 'sh -c "touch /' + "${applicationName}" + '.jar"'
//    entryPoint(["java","-Djava.security.egd=file:/dev/./urandom","-jar","/${applicationName}.jar"])
//}
//
//task buildDockerImageTagVersion(type: Docker) {
//    dependsOn 'bootRepackage'
//    applicationName = "${applicationName}"
//    tagVersion = "${applicationVersion}"
//    volume '/tmp'
//    addFile "build/libs/${applicationName}-" + "${applicationVersion}.jar", "${applicationName}.jar"
//    exposePort 8080
//    runCommand 'sh -c "touch /' + "${applicationName}" + '.jar"'
//    entryPoint(["java","-Djava.security.egd=file:/dev/./urandom","-jar","/${applicationName}.jar"])
//}

test {
    doFirst {
        System.setProperty('spring.profiles.active', 'test')
    }
}

bootRun {
//    args = ["--spring.profiles.active=test"]
    args = ["--spring.profiles.active=prod"]
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    testCompile('org.springframework.boot:spring-boot-starter-test')

    compile "io.springfox:springfox-swagger2:2.6.0"
    compile('io.springfox:springfox-data-rest:2.6.0')
    compile('io.springfox:springfox-swagger-ui:2.6.0')

	testCompile("com.h2database:h2")
    compile('mysql:mysql-connector-java')
}
